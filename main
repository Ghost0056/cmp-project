#include <algorithm>
#include <fstream>
#include <getopt.h>
#include <iomanip>
#include <iostream>
#include <vector>
#include <iterator>
#include <string>
using namespace std;

struct linearqueue {
int processus[6];
};

void insert(linearqueue *l, int time, int marge) {
  for (int i = 0; i < marge; i++) {

    int *process = l[i].processus;
    if (process[5] == 0 && process[1] == time) {
      process[5] = 1;
    }
  }
}

void execution(linearqueue *aProcesses, int eProcessTE, int marge) {
  int counter = 0;

  for (int i = 0; i < marge; i++) {

    int *process = aProcesses[i].processus;
    if (i == eProcessTE && process[4] == 0) {
      process[0] = process[0] - 1;

      if (process[0] == 0) {
        process[4] = 1;
      }

    } else if (process[5] == 1 && process[4] == 0) {
      process[3] = process[3] + 1;
    }

    counter++;
  }
}

int scheduling_Processes(linearqueue *l, int type, int marge) {
  int processSelected = -1;
  int lowestProcess = 0;
  int counter = 0;
  bool boolProcessSelected = false;

  for (int i = 0; i < marge; i++) {

    int *process = l[i].processus;

    if ((boolProcessSelected == false && process[5] == 1 && process[4] == 0) ||
        (boolProcessSelected == true && process[5] == 1 && process[4] == 0 &&
         process[type] < lowestProcess)) {
      lowestProcess = process[type];
      processSelected = counter;
      boolProcessSelected = true;
    }
    counter++;
  }

  return processSelected;
}
void scheduling_Preemptive(linearqueue *aProcesses, int type, int marge) {
  bool tester = true;
  int time = 0;
  cout << "schedulingPreemptive begins"<<endl;
  while (tester == true) {
    insert(aProcesses, time, marge);
    int processesToExecute = scheduling_Processes(aProcesses, type, marge);
    if (processesToExecute == -1) {
      tester = false;
    } else {
      executionProcess(aProcesses, processesToExecute, marge);
      time++;
    }
  }
  cout << "Scheduling Finished"<<endl;
  cout << time << "time"<<endl;
}

void scheduling_NonPreemptive(linearqueue *aProcesses, int type, int marge) {
  bool tester = true;
  int time = 0;
  cout << "schedulingNonPreemptive begins\n";
  insert(aProcesses, time, marge);
  while (tester == true) {
    int processesToExecute = scheduling_Processes(aProcesses, type, marge);
    if (processesToExecute == -1) {
      tester = false;
    } else {
      int *process = aProcesses[processesToExecute].processus;
      while (process[4] == 0) {
        executionProcess(aProcesses, processesToExecute, marge);
        time++;
        insert(aProcesses, time, marge);
      }
    }
  }
  cout << "Scheduling Finishes"<<endl;
  cout << time << "time"<<endl;
}

void RoundRobin(linearqueue *aProcesses, int q, int marge) {
  bool tester = true;
  int time = 0;
  cout << "RoundRobin begins"<<endl;
  insert(aProcesses, time, marge);
  int processListSize = marge;
  int currentprocess = 0;
  while (tester == true) {
    for (int i = 0; i < q; i++) {
      int processesToExecute = scheduling_Processes(aProcesses, 1, marge);
      int *process = aProcesses[currentprocess].processus;
      if (processesToExecute == -1) {
        tester = false;
        break;
      } else if (process[4] == 1) {
        break;
      } else {
        executionProcess(aProcesses, currentprocess, marge);
        insert(aProcesses, time, marge);
        time++;
      }
    }
    currentprocess++;
    if (currentprocess == processListSize) {
      currentprocess = 0;
    }
  }
}

float Average(linearqueue *aProcesses, int marge) {
  int Sum = 0;
  for (int i = 0; i < marge; i++) {
    int *process = aProcesses[i].processus;
    Sum = Sum + process[3];
  }
  return (Sum / 5);
}
void Time_Waiting(linearqueue *aProcesses, int marge) {
  for (int i = 0; i < marge; i++) {
    int *process = aProcesses[i].processus;
    cout << "P" << i + 1 << ": " << process[3] << "ms "<<endl;
  }
}

void Write(string output) {

  ofstream files;
  files.open(output);

  cout << "Write YOUR MESSAGE"<<endl;

  files << "Average :"
    cout << " "<<endl;
        << "ms";

  files.close();
}

char *input = NULL;
char *output = NULL;

int main(int arg, char *avg[]) {
  int b;

  if (arg < 2) {
    cout << "You should use 2 arguments";
    exit(0);
  }


while ((b = getopt(arg, avg, "f:o:")) != -1) {
    switch (b) {
    case 'f':
      input = optarg;
      break;
    case 'g':
      output = optarg;
      break;
    default:
      break;
    }
  }

  if (input == NULL || output == NULL) {
    cout << "use the parameter f for input and g for output";
    exit(0);
  }
  int nbreofline = 0;
  vector<linearqueue> tempArray{};

  std::ifstream file(input);
  std::string str;

  while (std::getline(file, str)) {
    vector<string> words{};
    string delimiter = ":";
    
    int pos;
    string text = str;

    while ((pos = text.find(delimiter)) != string::npos) {
      words.push_back(text.substr(0, pos));
      text.erase(0, pos + delimiter.length());
    }
    int p[6];
    int count = 0;
    for (const auto &str : words) {
      p[count] = stoi(str);
      count++;
    }
    p[2] = stoi(text);
    p[3] = 0;
    p[4] = 0;
    p[5] = 0;
    linearqueue S1 = {{p[0], p[1], p[2], p[3], p[4], p[5]}};
    tempArray.push_back(S1);
    nbreofline++;
  }

  linearqueue processes[nbreofline];
  int m = 0;
  for (const auto &ar : tempArray) {
    processes[j] = ar;
    m++;
  }

int Action_Selected;
  int h = 0;
  bool finish = false;
  while (finish == false) {
    cout << "Choose Your Action : "<<endl;
    cout << "1. Scheduling Preemptinve"<<endl;
    cout << "2. Scheduling Non_Preemptinve"<<endl;
    cout << "3. Display Result"<<endl;
    cout << "4. Terminate Program"<<endl;
    cin >> Action_Selected;
switch (Action_Selected) {
    case 1: {
      int preemptiveSchedulingChoice;
      cout << "Choose Between the five Scheduling Preemptinve Type "<<endl;
      cout << "1. None\n";
      cout << "2. First Come, First Served Scheduling"<<endl;
      cout << "3. Shortest-Job-First Scheduling"<<endl;
      cout << "4. Priority Scheduling"<<endl;
      cout << "5. Round-Robin Scheduling"<<endl;
      cin >> preemptiveSchedulingChoice;
      switch (preemptiveSchedulingType) {
      case 1:
        cout << "None\n";
        break;
      case 2:
        cout << "First Come, First Served Scheduling"<<endl;
        scheduling_Preemptive(processes, 1, nbreofline);
        break;
      case 3:
        cout << "Shortest-Job-First Scheduling\n";
        scheduling_Preemptive(processes, 0, nbreofline);
        break;
      case 4:
        cout << "Priority Scheduling\n";
        scheduling_Preemptive(processes, 2, nbreofline);
        break;
      case 5:
        cout << "Round-Robin Scheduling\n";
        cout << "Insert Q\n";
        int q;
        cin >> q;
        scheduling_RoundRobin(processes, q, nbreofline);
        break;
      default:
        cout << "choose between 1 - 5";
        break;
      }
