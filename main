#include <algorithm>
#include <fstream>
#include <getopt.h>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <string>
#include <vector>
using namespace std;

struct linearqueue {

  int processus[6];
};

void insert(linearqueue *l, int mytimer, int marge) {
  for (int i = 0; i < marge; i++) {

    int *process = l[i].processus;
    if (process[5] == 0 && process[1] == mytimer) {
      process[5] = 1;
    }
  }
}

void executionProcess(linearqueue *eProcesses, int eProcessTE, int marge) {
  int counter = 0;

  for (int i = 0; i < marge; i++) {

    int *process = eProcesses[i].processus;
    if (i == eProcessTE && process[4] == 0) {
      process[0] = process[0] - 1;

      if (process[0] == 0) {
        process[4] = 1;
      }

    } else if (process[5] == 1 && process[4] == 0) {
      process[3] = process[3] + 1;
    }

    counter++;
  }
}

int schedulingProcessChoice(linearqueue *l, int type, int marge) {
  int processSelected = -1;
  int lowestProcess = 0;
  int counter = 0;
  bool boolProcessSelected = false;

  for (int i = 0; i < marge; i++) {

    int *process = l[i].processus;

    if ((boolProcessSelected == false && process[5] == 1 && process[4] == 0) ||
        (boolProcessSelected == true && process[5] == 1 && process[4] == 0 &&
         process[type] < lowestProcess)) {
      lowestProcess = process[type];
      processSelected = counter;
      boolProcessSelected = true;
    }
    counter++;
  }

 return processSelected;
}

void schedulingPreemptive(linearqueue *pProcesses, int type, int marge) {
  bool tester = true;
  int time = 0;
  cout << "schedulingPreemptive start\n";
  while (tester == true) {
    insert(pProcesses, time, marge);
    int processesToExecute = schedulingProcessChoice(pProcesses, type, marge);
    if (processesToExecute == -1) {
      tester = false;
    } else {
      executionProcess(pProcesses, processesToExecute, marge);
      time++;
    }
  }
  cout << "Scheduling Finish\n";
  cout << time << "time\n";
}
void schedulingNonPreemptive(linearqueue *pProcesses, int type, int marge) {
  bool tester = true;
  int time = 0;
  cout << "schedulingNonPreemptive start\n";
  insert(pProcesses, time, marge);
  while (tester == true) {
    int processesToExecute = schedulingProcessChoice(pProcesses, type, marge);
    if (processesToExecute == -1) {
      tester = false;
} else {
      int *process = pProcesses[processesToExecute].processus;
      while (process[4] == 0) {
        executionProcess(pProcesses, processesToExecute, marge);
        time++;
        insert(pProcesses, time, marge);
      }
    }
  }
  cout << "Scheduling Finish\n";
  cout << time << "time\n";
}

void schedulingRoundRobin(linearqueue *pProcesses, int quantum, int marge) {
  bool tester = true;
  int time = 0;
  cout << "schedulingRoundRobin start\n";
  insert(pProcesses, time, marge);
  int processListSize = marge;
  int currentprocess = 0;
  while (tester == true) {
    for (int i = 0; i < quantum; i++) {
      int processesToExecute = schedulingProcessChoice(pProcesses, 1, marge);
      int *process = pProcesses[currentprocess].processus;
      if (processesToExecute == -1) {
        tester = false;
        break;
      } else if (process[4] == 1) {
        break;
      } else {
        executionProcess(pProcesses, currentprocess, marge);
        insert(pProcesses, time, marge);
        time++;
      }
    }
    currentprocess++;
    if (currentprocess == processListSize) {
      currentprocess = 0;
    }
  }
}
